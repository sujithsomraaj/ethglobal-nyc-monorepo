// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InitData extends ethereum.Event {
  get params(): InitData__Params {
    return new InitData__Params(this);
  }
}

export class InitData__Params {
  _event: InitData;

  constructor(event: InitData) {
    this._event = event;
  }

  get slotId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get currState_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateData extends ethereum.Event {
  get params(): UpdateData__Params {
    return new UpdateData__Params(this);
  }
}

export class UpdateData__Params {
  _event: UpdateData;

  constructor(event: UpdateData) {
    this._event = event;
  }

  get slotId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get currState_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__stateResult {
  value0: Bytes;
  value1: BigInt;

  constructor(value0: Bytes, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getExtInfo_(): Bytes {
    return this.value0;
  }

  getState_(): BigInt {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  isDuplicate(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "isDuplicate",
      "isDuplicate(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDuplicate(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDuplicate",
      "isDuplicate(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  packetCounter(): BigInt {
    let result = super.call("packetCounter", "packetCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_packetCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "packetCounter",
      "packetCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(storageSlot_: Bytes): Contract__stateResult {
    let result = super.call("state", "state(bytes32):(bytes,uint256)", [
      ethereum.Value.fromFixedBytes(storageSlot_)
    ]);

    return new Contract__stateResult(result[0].toBytes(), result[1].toBigInt());
  }

  try_state(storageSlot_: Bytes): ethereum.CallResult<Contract__stateResult> {
    let result = super.tryCall("state", "state(bytes32):(bytes,uint256)", [
      ethereum.Value.fromFixedBytes(storageSlot_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stateResult(value[0].toBytes(), value[1].toBigInt())
    );
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get commandId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceChain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class HandleCall extends ethereum.Call {
  get inputs(): HandleCall__Inputs {
    return new HandleCall__Inputs(this);
  }

  get outputs(): HandleCall__Outputs {
    return new HandleCall__Outputs(this);
  }
}

export class HandleCall__Inputs {
  _call: HandleCall;

  constructor(call: HandleCall) {
    this._call = call;
  }

  get _origin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sender(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _message(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleCall__Outputs {
  _call: HandleCall;

  constructor(call: HandleCall) {
    this._call = call;
  }
}
